dat <- as.data.frame( dat )
# ================================================================== #
# Create the function to build the set of t.tests
t.test.data <- function( dat.to.use, vars.to.use, group.var, alpha = 0.05 ){
# Create the objects to assign values
tests <- as.list( NULL )
values <- NA
pval <- NA
uci <- NA
lci <- NA
# Perform the tests
for( i in 1: ncol( vars.to.use ) ){
tests[[i]] <-
t.test( vars.to.use[[i]] ~ group.var, data = dat.to.use )
}
# Extract the values
for( i in 1: length( tests ) ){
values[i] <- round( ( tests[[i]]$estimate[1] - tests[[i]]$estimate[2] ), 3 )
pval[i]   <- round( tests[[i]]$p.value, 3 )
lci[i]    <- round( tests[[i]]$conf.int[1], 3 )
uci[i]    <- round( tests[[i]]$conf.int[2], 3 )
}
# Create the bonferroni corrected pvalues
bonf.pval <- round( alpha / length( tests ), 3 )
# Create reject/fail to reject
reject <- NULL
reject <- pval < bonf.pval
# Build the data object
results <- cbind( values, pval, bonf.pval, reject, lci, uci )
colnames( results ) <- c( "tvalue", "pvalue", "Bonf.Pvalue", "Reject?", "LCI", "UCI" )
rownames( results ) <- names( vars.to.use )
return( as.data.frame( results ) )
}
# ================================================================== #
# Create the function to plot the results
plot.ttests <- function( t.results, the.title ){
point    <- t.results$tvalue
upper.ci <- t.results$UCI
lower.ci <- t.results$LCI
x.ax <- seq( 1, dim( t.results )[1], length.out = dim( t.results )[1] )
y.ax <- seq(
min( c( upper.ci,lower.ci ) ),
max( c( upper.ci,lower.ci ) ),
length.out= dim( t.results )[1]
)
plot(x.ax,
y.ax,
type = "n",
ylab = "coefficient w/ 95% CI",
xlab = "",
xaxt = "n"
)
points( x.ax, point )
segments(x.ax, upper.ci, x.ax, lower.ci)
abline( h = 0, lty = 2 )
axis( side = 1, at = x.ax, las = 3, labels = rownames( t.results ) )
title( the.title )
}
# ================================================================== #
# Check balance in covariates among those who were randomized
# Get the data you want to compare
balance.dat <- dat %>%
select(
id, Interviewer, Randomize,
Log_Age, White, Black, Hispanic,
Education, Single, Children, First_Timer,
Time_In, Sentence_Length, Lifer
)
# keep 158 cases, table(balance.dat$Randomize == 1)
randomized.dat <- balance.dat[balance.dat$Randomize == 1,]
# Create the variables to perform the tests on
randomized.vars.to.use <- randomized.dat %>%
select( -c( id, Interviewer, Randomize ) )
# Create the object of t-test results
randomized.t.results <- t.test.data(
randomized.dat, randomized.vars.to.use, randomized.dat$Interviewer
)
plot.ttests( randomized.t.results, "Balance among \nRandomized Interviewees (n = 158)" )
names( randomized.vars.to.use )
custom_labels <- c(
"Age (Logged)", "White", "Black", "Hispanic", "Years of Education", "Single", "Has Children",
"First Time\n in Prison", "Time In Prison", "Sentence Length", "Lifer"
custom_labels <- c(
custom_labels <- c(
"Age (Logged)", "White", "Black", "Hispanic", "Years of Education", "Single", "Has Children",
"First Time\n in Prison", "Time In Prison", "Sentence Length", "Lifer"
)
# ================================================================== #
# PAPER TITLE
# ================================================================== #
# DOCUMENT!!!
# ================================================================== #
# Setup ----
# Clear the workspace
rm( list = ls() )
# Load the libraries
library( dplyr ) # for working with the data
# ================================================================== #
# load the data
dat <- readRDS( file = here( "PR-interviewer-comparison-rodeo/trust.rhps.cntrls.vars.data.rds" ) )
# coerce to a data frame
dat <- as.data.frame( dat )
# ================================================================== #
# Create the function to build the set of t.tests
t.test.data <- function( dat.to.use, vars.to.use, group.var, alpha = 0.05 ){
# Create the objects to assign values
tests <- as.list( NULL )
values <- NA
pval <- NA
uci <- NA
lci <- NA
# Perform the tests
for( i in 1: ncol( vars.to.use ) ){
tests[[i]] <-
t.test( vars.to.use[[i]] ~ group.var, data = dat.to.use )
}
# Extract the values
for( i in 1: length( tests ) ){
values[i] <- round( ( tests[[i]]$estimate[1] - tests[[i]]$estimate[2] ), 3 )
pval[i]   <- round( tests[[i]]$p.value, 3 )
lci[i]    <- round( tests[[i]]$conf.int[1], 3 )
uci[i]    <- round( tests[[i]]$conf.int[2], 3 )
}
# Create the bonferroni corrected pvalues
bonf.pval <- round( alpha / length( tests ), 3 )
# Create reject/fail to reject
reject <- NULL
reject <- pval < bonf.pval
# Build the data object
results <- cbind( values, pval, bonf.pval, reject, lci, uci )
colnames( results ) <- c( "tvalue", "pvalue", "Bonf.Pvalue", "Reject?", "LCI", "UCI" )
rownames( results ) <- names( vars.to.use )
return( as.data.frame( results ) )
}
# ================================================================== #
# Create the function to plot the results
plot.ttests <- function( t.results, the.title ){
point    <- t.results$tvalue
upper.ci <- t.results$UCI
lower.ci <- t.results$LCI
x.ax <- seq( 1, dim( t.results )[1], length.out = dim( t.results )[1] )
y.ax <- seq(
min( c( upper.ci,lower.ci ) ),
max( c( upper.ci,lower.ci ) ),
length.out= dim( t.results )[1]
)
plot(x.ax,
y.ax,
type = "n",
ylab = "coefficient w/ 95% CI",
xlab = "",
xaxt = "n"
)
points( x.ax, point )
segments(x.ax, upper.ci, x.ax, lower.ci)
abline( h = 0, lty = 2 )
axis( side = 1, at = x.ax, las = 3, labels = custom_labels )
title( the.title )
}
# ================================================================== #
# Check balance in covariates among those who were randomized
# Get the data you want to compare
balance.dat <- dat %>%
select(
id, Interviewer, Randomize,
Log_Age, White, Black, Hispanic,
Education, Single, Children, First_Timer,
Time_In, Sentence_Length, Lifer
)
# keep 158 cases, table(balance.dat$Randomize == 1)
randomized.dat <- balance.dat[balance.dat$Randomize == 1,]
# Create the variables to perform the tests on
randomized.vars.to.use <- randomized.dat %>%
select( -c( id, Interviewer, Randomize ) )
# Create vector of names for the plot
custom_labels <- c(
"Age (Logged)", "White", "Black", "Hispanic", "Years of Education", "Single", "Has Children",
"First Time\n in Prison", "Time In Prison", "Sentence Length", "Lifer"
)
# Create the object of t-test results
randomized.t.results <- t.test.data(
randomized.dat, randomized.vars.to.use, randomized.dat$Interviewer
)
plot.ttests( randomized.t.results, "Balance among \nRandomized Interviewees (n = 158)" )
# ================================================================== #
# PAPER TITLE
# ================================================================== #
# DOCUMENT!!!
# ================================================================== #
# Setup ----
# Clear the workspace
rm( list = ls() )
# Load the libraries
library( dplyr ) # for working with the data
# ================================================================== #
# load the data
dat <- readRDS( file = here( "PR-interviewer-comparison-rodeo/trust.rhps.cntrls.vars.data.rds" ) )
# coerce to a data frame
dat <- as.data.frame( dat )
# ================================================================== #
# Create the function to build the set of t.tests
t.test.data <- function( dat.to.use, vars.to.use, group.var, alpha = 0.05 ){
# Create the objects to assign values
tests <- as.list( NULL )
values <- NA
pval <- NA
uci <- NA
lci <- NA
# Perform the tests
for( i in 1: ncol( vars.to.use ) ){
tests[[i]] <-
t.test( vars.to.use[[i]] ~ group.var, data = dat.to.use )
}
# Extract the values
for( i in 1: length( tests ) ){
values[i] <- round( ( tests[[i]]$estimate[1] - tests[[i]]$estimate[2] ), 3 )
pval[i]   <- round( tests[[i]]$p.value, 3 )
lci[i]    <- round( tests[[i]]$conf.int[1], 3 )
uci[i]    <- round( tests[[i]]$conf.int[2], 3 )
}
# Create the bonferroni corrected pvalues
bonf.pval <- round( alpha / length( tests ), 3 )
# Create reject/fail to reject
reject <- NULL
reject <- pval < bonf.pval
# Build the data object
results <- cbind( values, pval, bonf.pval, reject, lci, uci )
colnames( results ) <- c( "tvalue", "pvalue", "Bonf.Pvalue", "Reject?", "LCI", "UCI" )
rownames( results ) <- names( vars.to.use )
return( as.data.frame( results ) )
}
# ================================================================== #
# Create the function to plot the results
plot.ttests <- function( t.results, the.title ){
point    <- t.results$tvalue
upper.ci <- t.results$UCI
lower.ci <- t.results$LCI
x.ax <- seq( 1, dim( t.results )[1], length.out = dim( t.results )[1] )
y.ax <- seq(
min( c( upper.ci,lower.ci ) ),
max( c( upper.ci,lower.ci ) ),
length.out= dim( t.results )[1]
)
plot(x.ax,
y.ax,
type = "n",
ylab = "coefficient w/ 95% CI",
xlab = "",
xaxt = "n"
)
points( x.ax, point )
segments(x.ax, upper.ci, x.ax, lower.ci)
abline( h = 0, lty = 2 )
axis( side = 1, at = x.ax, las = 3, labels = custom_labels )
title( the.title )
}
# ================================================================== #
# Check balance in covariates among those who were randomized
# Get the data you want to compare
balance.dat <- dat %>%
select(
id, Interviewer, Randomize,
Log_Age, White, Black, Hispanic,
Education, Single, Children, First_Timer,
Time_In, Sentence_Length, Lifer
)
# keep 158 cases, table(balance.dat$Randomize == 1)
randomized.dat <- balance.dat[balance.dat$Randomize == 1,]
# Create the variables to perform the tests on
randomized.vars.to.use <- randomized.dat %>%
select( -c( id, Interviewer, Randomize ) )
# Create vector of names for the plot
custom_labels <- c(
"Age\n (Logged)", "White", "Black", "Hispanic", "Years of\n Education", "Single", "Has\n Children",
"First Time\n in Prison", "Time In\n Prison", "Sentence\n Length", "Lifer"
)
# Create the object of t-test results
randomized.t.results <- t.test.data(
randomized.dat, randomized.vars.to.use, randomized.dat$Interviewer
)
plot.ttests( randomized.t.results, "Balance among \nRandomized Interviewees (n = 158)" )
plot.ttests( randomized.t.results, "Figure #: Balance among \nRandomized Interviewees (n = 158)" )
# ================================================================== #
# PAPER TITLE
# ================================================================== #
# DOCUMENT!!!
# ================================================================== #
# Setup ----
# Clear the workspace
rm( list = ls() )
# Load the libraries
library( dplyr ) # for working with the data
# ================================================================== #
# load the data
dat <- readRDS( file = here( "PR-interviewer-comparison-rodeo/trust.rhps.cntrls.vars.data.rds" ) )
# coerce to a data frame
dat <- as.data.frame( dat )
# ================================================================== #
# Create the function to build the set of t.tests
t.test.data <- function( dat.to.use, vars.to.use, group.var, alpha = 0.05 ){
# Create the objects to assign values
tests <- as.list( NULL )
values <- NA
pval <- NA
uci <- NA
lci <- NA
# Perform the tests
for( i in 1: ncol( vars.to.use ) ){
tests[[i]] <-
t.test( vars.to.use[[i]] ~ group.var, data = dat.to.use )
}
# Extract the values
for( i in 1: length( tests ) ){
values[i] <- round( ( tests[[i]]$estimate[1] - tests[[i]]$estimate[2] ), 3 )
pval[i]   <- round( tests[[i]]$p.value, 3 )
lci[i]    <- round( tests[[i]]$conf.int[1], 3 )
uci[i]    <- round( tests[[i]]$conf.int[2], 3 )
}
# Create the bonferroni corrected pvalues
bonf.pval <- round( alpha / length( tests ), 3 )
# Create reject/fail to reject
reject <- NULL
reject <- pval < bonf.pval
# Build the data object
results <- cbind( values, pval, bonf.pval, reject, lci, uci )
colnames( results ) <- c( "tvalue", "pvalue", "Bonf.Pvalue", "Reject?", "LCI", "UCI" )
rownames( results ) <- names( vars.to.use )
return( as.data.frame( results ) )
}
# ================================================================== #
# Create the function to plot the results
plot.ttests <- function( t.results, the.title ){
point    <- t.results$tvalue
upper.ci <- t.results$UCI
lower.ci <- t.results$LCI
x.ax <- seq( 1, dim( t.results )[1], length.out = dim( t.results )[1] )
y.ax <- seq(
min( c( upper.ci,lower.ci ) ),
max( c( upper.ci,lower.ci ) ),
length.out= dim( t.results )[1]
)
plot(x.ax,
y.ax,
type = "n",
ylab = "t-test coefficient w/ 95% CI",
xlab = "",
xaxt = "n"
)
points( x.ax, point )
segments(x.ax, upper.ci, x.ax, lower.ci)
abline( h = 0, lty = 2 )
axis( side = 1, at = x.ax, las = 3, labels = custom_labels )
title( the.title )
}
# ================================================================== #
# Check balance in covariates among those who were randomized
# Get the data you want to compare
balance.dat <- dat %>%
select(
id, Interviewer, Randomize,
Log_Age, White, Black, Hispanic,
Education, Single, Children, First_Timer,
Time_In, Sentence_Length, Lifer
)
# keep 158 cases, table(balance.dat$Randomize == 1)
randomized.dat <- balance.dat[balance.dat$Randomize == 1,]
# Create the variables to perform the tests on
randomized.vars.to.use <- randomized.dat %>%
select( -c( id, Interviewer, Randomize ) )
# Create vector of names for the plot
custom_labels <- c(
"Age\n (Logged)", "White", "Black", "Hispanic", "Years of\n Education", "Single", "Has\n Children",
"First Time\n in Prison", "Time In\n Prison", "Sentence\n Length", "Lifer"
)
# Create the object of t-test results
randomized.t.results <- t.test.data(
randomized.dat, randomized.vars.to.use, randomized.dat$Interviewer
)
plot.ttests( randomized.t.results, "Figure #: Balance among \nRandomized Interviewees (n = 158)" )
names(dat)
# Get the data you want to compare.
cov.dat <- dat %>%
select(
id, Interviewer, Randomize,
trust1:trust15,
rh1:rh14,
ps1:ps7
)
# Get the data you want to compare
cov.dat <- dat %>%
select(
id, Interviewer, Randomize,
trust1:trust15,
rh1:rh14,
ps1:ps7
)
# keep 158 cases
random.cov.dat <- cov.dat[cov.dat$Randomize == 1,]
# Create the variables to perform the tests on.
cov.vars.to.use <- random.cov.dat %>%
select( -c( id, Interviewer, Randomize ) )
# Create vector of names for the plot
custom_labels <- c(
paste("Trust ",rep( 1:dim(trust.vars.na)[2] ), sep = "" ),
paste("Relational Health ",rep( 1:dim(rh.vars.na)[2] ), sep = "" ),
paste("Psychological Safety ",rep( 1:dim(ps.vars.na)[2] ), sep = "" )
)
custom_labels <- c(
paste("Trust ",rep( 1:15 ), sep = "" ),
paste("Relational Health ",rep( 1:14 ), sep = "" ),
paste("Psychological Safety ",rep( 1:7 ), sep = "" )
)
# Create the object of t-test results.
cov.t.results <- t.test.data(
random.cov.dat, cov.vars.to.use, random.cov.dat$InterviewerType
)
# Create the object of t-test results.
cov.t.results <- t.test.data(
random.cov.dat, cov.vars.to.use, random.cov.dat$InterviewerType
)
# Create the object of t-test results.
cov.t.results <- t.test.data(
random.cov.dat, cov.vars.to.use, random.cov.dat$Interviewer
)
plot.ttests( cov.t.results, "Comparing Means among \nRandomized Interviewees (n = 158)"  )
# Create vector of names for the plot
custom_labels <- c(
paste("Trust ",rep( 1:15 ), sep = "" ),
paste("Relational\n Health ",rep( 1:14 ), sep = "" ),
paste("Psychological\n Safety ",rep( 1:7 ), sep = "" )
)
# Create the object of t-test results.
cov.t.results <- t.test.data(
random.cov.dat, cov.vars.to.use, random.cov.dat$Interviewer
)
plot.ttests( cov.t.results, "Comparing Means among \nRandomized Interviewees (n = 158)"  )
legend_labels <- paste(custom_labels, "meaning of label", sep = " - ")
legend("topright", legend = legend_labels, title = "X-axis Labels", cex = 0.8)
# labels for the legend
legend_labels <- c(
"T = Trust Item",
"RH = Relational Health Item",
"PS =  Psychological Safety Item"
)
# Create the object of t-test results
cov.t.results <- t.test.data(
random.cov.dat, cov.vars.to.use, random.cov.dat$Interviewer
)
# plot the tests
plot.ttests( cov.t.results, "Comparing Means among \nRandomized Interviewees (n = 158)"  )
# add a legend
legend( "topright" ,
legend = legend_labels,
title = "", cex = 0.5
)
# plot the tests
plot.ttests( cov.t.results, "Comparing Means among \nRandomized Interviewees (n = 158)"  )
# add a legend
legend( "topleft" ,
legend = legend_labels,
title = "", cex = 0.5
)
# add a legend
legend( "topleft" ,
legend = legend_labels,
title = "Legend", cex = 0.5
)
# Create vector of names for the plot
custom_labels <- c(
paste("T ",rep( 1:15 ), sep = "" ),
paste("RH ",rep( 1:14 ), sep = "" ),
paste("PS ",rep( 1:7 ), sep = "" )
)
# labels for the legend
legend_labels <- c(
"T = Trust Item",
"RH = Relational Health Item",
"PS =  Psychological Safety Item"
)
# Create the object of t-test results
cov.t.results <- t.test.data(
random.cov.dat, cov.vars.to.use, random.cov.dat$Interviewer
)
# plot the tests
plot.ttests( cov.t.results, "Comparing Means among \nRandomized Interviewees (n = 158)"  )
# add a legend
legend( "topleft" ,
legend = legend_labels,
title = "Legend", cex = 0.5
)
# plot the tests
plot.ttests( cov.t.results, "Comparing Means among \nRandomized Interviewees (n = 158)"  )
# add a legend
legend( "topleft" ,
legend = legend_labels,
title = "Legend", cex = 1.0
)
plot.ttests( cov.t.results, "Comparing Means among \nRandomized Interviewees (n = 158)"  )
# add a legend
legend( "topleft" ,
legend = legend_labels,
title = "Legend", cex = 0.7
)
# plot the tests
plot.ttests( cov.t.results, "Comparing Means among \nRandomized Interviewees (n = 158)"  )
# add a legend
legend( "topleft" ,
legend = legend_labels,
title = "Legend", cex = 0.5
)
cov.t.results
0.05/15
